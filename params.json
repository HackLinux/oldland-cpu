{"name":"Oldland-cpu","tagline":"Oldland CPU - a 32-bit RISC FPGA CPU including RTL + tools","body":"Oldland CPU\r\n===========\r\n\r\nOldland is a 32-bit RISC CPU designed primarily to learn more about Verilog\r\nand FPGA's.  At the moment this consists of the CPU core itself (Oldland), and\r\na SoC implementation (Keynsham) that includes the CPU core, on-chip bootrom,\r\ninternal SRAM, an SDRAM controller and UART.\r\n\r\nIncluded is an instruction set simulator, tools for debugging in gtkwave, a\r\nbootloader (and associated bootrom code).  Documentation is currently sparse\r\nand there are a few working limitations:\r\n\r\n- Only the on-chip memory is connected to the instruction bus.\r\n- There is no hardware multiply implemented yet.\r\n\r\nThe FPGA target is for a DE0 nano and runs at 50MHz, though it should\r\nsynthesize at >80MHz at the moment.\r\n\r\nTesting\r\n-------\r\n\r\nGrab binutils-oldland from https://github.com/jamieiles/binutils-oldland and\r\nbuild with:\r\n```shell\r\n  ./configure --target=oldland-elf\r\n  make all\r\n  make install\r\n```\r\nMake sure that the oldland-elf-* tools are in your path and build the CPU +\r\ntools with:\r\n```shell\r\n  mkdir BUILD\r\n  cmake -DCMAKE_INSTALL_PREFIX:PATH=INSTALL_PREFIX ..\r\n  make all\r\n  make install\r\n```\r\nand add `${INSTALL_PREFIX}/bin` to your path.\r\n\r\nRun `oldland-test` to run tests on both the instruction set and RTL\r\nsimulations.\r\n\r\nRunning on hardware\r\n-------------------\r\n\r\nBuild the FPGA image in Quartus and load it onto the device.  Run\r\noldland-jtagd on the development machine, oldland-debug can then connect to\r\nthe CPU over the virtual JTAG.\r\n\r\nLicensing\r\n---------\r\n\r\nThis project is currently licensed under GPLv2 except for oldland-jtagd which\r\nis under the Apache license v2.0.\r\n","google":"UA-43848066-1","note":"Don't delete this file! It's used internally to help with page regeneration."}