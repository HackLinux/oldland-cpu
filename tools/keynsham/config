#!/usr/bin/env python

import yaml
import math
import os
import sys

HERE = os.path.dirname(__file__)

with open(os.path.join(HERE, '..', '..', 'config', 'keynsham.yaml'),
          'r') as config:
    keynsham_config = yaml.load(config.read())

class HeaderWriter(object):
    lines = []
    prefix = []
    suffix = []

    def dump(self):
        return '\n'.join(self.prefix + self.lines + self.suffix)

class VerilogWriter(HeaderWriter):
    def out(self, name, value):
        self.lines.append(('`define {0} {1}'.format(name, value)))

    def out_int(self, name, value, width = 32, base = 16):
        self.lines.append(('`define {0} {1}'.format(name, self._format_int(value, width, base))))

    def _format_int(self, v, width = 32, base = 16):
        if isinstance(v, str):
            v = int(v, 16)
        if base == 16:
            return "{0}'h{1:x}".format(width, v)
        assert base == 10
        return "{0}'d{1:d}".format(width, v)

class CWriter(HeaderWriter):
    prefix = ['#ifndef __CONFIG_H__', '#define __CONFIG_H__']
    suffix = ['#endif /* __CONFIG_H__ */']

    def out(self, name, value):
        self.lines.append(('#define {0} {1}'.format(name, value)))

    def out_int(self, name, value, width = 32, base = 16):
        self.lines.append(('#define {0} {1}'.format(name, self._format_int(value, width, base))))

    def _format_int(self, v, width = 32, base = 16):
        if isinstance(v, str):
            v = int(v, 16)
        if base == 16:
            return "0x{0:x}".format(v)
        assert base == 10
        return "{0:d}".format(v)

def generate_config(writer):
    cpu = keynsham_config['cpu']
    writer.out('ICACHE_SIZE', cpu['icache']['size'])
    writer.out('ICACHE_LINE_SIZE', cpu['icache']['line_size'])
    writer.out('DCACHE_SIZE', cpu['dcache']['size'])
    writer.out('DCACHE_LINE_SIZE', cpu['dcache']['line_size'])
    writer.out_int('CPUID_MANUFACTURER', cpu['manufacturer'], width = 16)
    writer.out_int('CPUID_MODEL', cpu['model'], width = 16)
    writer.out('CPU_CLOCK_SPEED', 50000000)

    for p in keynsham_config['peripherals']:
        name = p['name'].upper()
        writer.out_int('{0}_ADDRESS'.format(name), p['address'])
        writer.out_int('{0}_SIZE'.format(name), p['size'])

    if isinstance(writer, CWriter):
        # Special cases for C to avoid log2() in preprocessor
        writer.out('ICACHE_OFFSET_BITS',
                   int(math.log(cpu['icache']['line_size'], 2)))
        writer.out('ICACHE_INDEX_BITS',
                   int(math.log(cpu['icache']['size'] / cpu['icache']['line_size'], 2)))
        writer.out('DCACHE_OFFSET_BITS',
                   int(math.log(cpu['dcache']['line_size'], 2)))
        writer.out('DCACHE_INDEX_BITS',
                   int(math.log(cpu['dcache']['size'] / cpu['dcache']['line_size'], 2)))

if __name__ == '__main__':
    if '--verilog' in sys.argv:
        writer = VerilogWriter()
    elif '--c' in sys.argv:
        writer = CWriter()
    else:
        raise NotImplementedError
    generate_config(writer)
    print writer.dump()
