#!/usr/bin/env python

import yaml
import math
import os
import sys

HERE = os.path.dirname(__file__)
CONFIG_PATH = os.path.join(HERE, '..', '..', 'config')

with open(os.path.join(CONFIG_PATH, 'keynsham.yaml'),
          'r') as config:
    keynsham_config = yaml.load(config.read())

class HeaderWriter(object):
    prefix = []
    suffix = []

    def __init__(self, filename):
        self.lines = []
        self.filename = filename

    def dump(self):
        with open(self.filename, 'w') as outfile:
            outfile.write('\n'.join(self.prefix + self.lines + self.suffix))

class VerilogWriter(HeaderWriter):
    def __init__(self, filename):
        super(VerilogWriter, self).__init__(filename + '.v')

    def out(self, name, value):
        self.lines.append(('`define {0} {1}'.format(name, value)))

    def out_int(self, name, value, width = 32, base = 16):
        self.lines.append(('`define {0} {1}'.format(name, self._format_int(value, width, base))))

    def out_include(self, name):
        self.lines.append('`include "{0}"'.format(name + '.v'))

    def _format_int(self, v, width = 32, base = 16):
        if isinstance(v, str):
            v = int(v, 16)
        if base == 16:
            return "{0}'h{1:x}".format(width, v)
        assert base == 10
        return "{0}'d{1:d}".format(width, v)

class CWriter(HeaderWriter):
    def __init__(self, filename):
        guardname = filename.upper().replace('.', '_')
        self.prefix = ['#ifndef __{0}_H__'.format(guardname),
                       '#define __{0}_H__'.format(guardname)]
        self.suffix = ['#endif /* __{0}_H__ */'.format(guardname)]

        super(CWriter, self).__init__(filename + '.h')

    def out(self, name, value):
        self.lines.append(('#define {0} {1}'.format(name, value)))

    def out_int(self, name, value, width = 32, base = 16):
        self.lines.append(('#define {0} {1}'.format(name, self._format_int(value, width, base))))

    def out_include(self, name):
        self.lines.append('#include "{0}"'.format(name + '.h'))

    def _format_int(self, v, width = 32, base = 16):
        if isinstance(v, str):
            v = int(v, 16)
        if base == 16:
            return "0x{0:x}".format(v)
        assert base == 10
        return "{0:d}".format(v)

def reg_write_fields(writer, fields):
    for fieldname, info in fields.items():
        offset = int(info['offset'])
        mask = ((1 << int(info['width'])) - 1) << offset

        writer.out_int('{0}_OFFSET'.format(fieldname.upper()), offset, base = 16)
        writer.out_int('{0}_MASK'.format(fieldname.upper()), mask, base = 16)
        writer.out_int('{0}_BITS'.format(fieldname.upper()), info['width'])

def periph_write_regmap(writer, peripheral):
    if not 'regmap' in peripheral:
        return

    with open(os.path.join(CONFIG_PATH, 'regmaps', peripheral['regmap'] + '.yaml'), 'r') as regmapfile:
        regmap = yaml.load(regmapfile.read())

    for reg, info in regmap.items():
        regname = reg.upper()
        writer.out_int('{0}_REG_OFFS'.format(regname), info['offset'])

        if 'fields' in info:
            reg_write_fields(writer, info['fields'])

def generate_config(writer):
    cpu = keynsham_config['cpu']
    writer.out('ICACHE_SIZE', cpu['icache']['size'])
    writer.out('ICACHE_LINE_SIZE', cpu['icache']['line_size'])
    writer.out('ICACHE_NUM_WAYS', cpu['icache']['num_ways'])
    writer.out('DCACHE_SIZE', cpu['dcache']['size'])
    writer.out('DCACHE_LINE_SIZE', cpu['dcache']['line_size'])
    writer.out('DCACHE_NUM_WAYS', cpu['dcache']['num_ways'])
    writer.out_int('CPUID_MANUFACTURER', cpu['manufacturer'], width = 16)
    writer.out_int('CPUID_MODEL', cpu['model'], width = 16)
    writer.out('CPU_CLOCK_SPEED', cpu['clock_speed'])

    for p in keynsham_config['peripherals']:
        periph_writer = type(writer)(p['name'] + "_defines")
        name = p['name'].upper()
        periph_writer.out_int('{0}_ADDRESS'.format(name), p['address'])
        periph_writer.out_int('{0}_SIZE'.format(name), p['size'])
        periph_write_regmap(periph_writer, p)
        periph_writer.dump()
        writer.out_include(p['name'] + "_defines")

    if isinstance(writer, CWriter):
        # Special cases for C to avoid log2() in preprocessor
        writer.out('ICACHE_OFFSET_BITS',
                   int(math.log(cpu['icache']['line_size'], 2)))
        writer.out('ICACHE_INDEX_BITS',
                   int((math.log((cpu['icache']['size'] / cpu['icache']['num_ways']) / cpu['icache']['line_size'], 2))))
        writer.out('DCACHE_OFFSET_BITS',
                   int(math.log(cpu['dcache']['line_size'], 2)))
        writer.out('DCACHE_INDEX_BITS',
                   int((math.log((cpu['dcache']['size'] / cpu['dcache']['num_ways']) / cpu['dcache']['line_size'], 2))))

if __name__ == '__main__':
    if '--verilog' in sys.argv:
        writer = VerilogWriter('keynsham_defines')
    elif '--c' in sys.argv:
        writer = CWriter('config')
    else:
        raise NotImplementedError
    generate_config(writer)
    writer.dump()
