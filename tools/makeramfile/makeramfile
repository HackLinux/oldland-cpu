#!/usr/bin/env python
import struct
import sys

def calc_csum(addr, wbytes):
    csum = (((addr >> 8) & 0xff) +
            (addr & 0xff) +
            4 + # byte count = 4
            ord(wbytes[3]) +
            ord(wbytes[2]) +
            ord(wbytes[1]) +
            ord(wbytes[0]))
    csum ^= 0xff
    csum += 1

    return csum & 0xff

def convert(binfile, hexfile):
    addr = 0
    while True:
        word = binfile.read(4)
        if not len(word):
            break
        wbytes = struct.unpack('cccc', word)
        csum = calc_csum(addr, wbytes)
        hexfile.write(':04{addr:04X}00{d3:02X}{d2:02X}{d1:02X}{d0:02X}{csum:02X}\n'.format(
            addr = addr, d3 = ord(wbytes[3]), d2 = ord(wbytes[2]),
            d1 = ord(wbytes[1]), d0 = ord(wbytes[0]), csum = csum))
        addr += 1
    hexfile.write(':00000001FF\n')

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print('usage: bintohex input output')
        sys.exit(1)
    
    with open(sys.argv[1], 'r') as binfile:
        with open(sys.argv[2], 'w') as hexfile:
            convert(binfile, hexfile)
