#!/usr/bin/env python
#
# Boot a Keynsham SoC device using the onchip bootrom and open a minicom
# instance for interacting with it.
from progressbar import ProgressBar, Percentage, Bar
import serial
import struct
import subprocess
import sys

ACK_TIMEOUT = 2500 # 2.5 seconds should cover slow simulations.

class BootFailure(IOError):
    pass

def wait_for_ack(sp, allow_miss = False):
    """Wait for the acknowledgement packet.  If allow_miss = True, then we can
       skip the acknowledgement packet.  This can be useful when the
       simulation/device has already been booted and we don't attach quickly
       enough to see the awake packet.
    """
    rxdata = sp.read(1)
    if len(rxdata) != 1 and not allow_miss:
        raise BootFailure('failed to read ack')

def send_buf(sp, buf):
    progress = ProgressBar(widgets = [Percentage(), Bar()],
                           maxval = len(buf)).start()

    for i, b in enumerate(buf):
        if sp.write(b) != 1:
            raise BootFailure('failed to write data byte')
        wait_for_ack(sp)
        progress.update(i + 1)

def format_length(length):
    """Format the length as a 32 bit big endian integer."""
    return struct.pack('>I', length)

def boot(pts, filename):
    sp = serial.Serial(port = pts, baudrate = 115200, timeout = 2.5)

    # Hello packet that we may have missed.
    wait_for_ack(sp, allow_miss = True)

    with open(filename, 'r') as binfile:
        data = binfile.read()
        length = format_length(len(data))
        print('sending length')
        send_buf(sp, length)
        print('sending data')
        send_buf(sp, data)

def main(args):
    if len(args) != 2:
        print('usage: bootterm PTS BINFILE')
        return -1

    try:
        boot(args[0], args[1])
    except BootFailure as e:
        print e
        return 1
    except Exception as e:
        print e
        return 1
    cmd = ['/usr/bin/minicom']
    if 'pts' in args[0]:
        cmd += ['-p', args[0]]
    subprocess.call(cmd)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
